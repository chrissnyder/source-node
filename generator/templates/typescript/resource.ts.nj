import { BaseContext } from '../BaseContext'
import type { CatalystOptions } from '../Catalyst'

{% for type in types %}
interface {{ type.name }} {
  {%- for field in type.fields %}
  {% if field.comment %}
  /**
   * {{ field.comment | wrap(120) | prefix('   * ', 1) }}
   */
  {% endif -%}
  {% if field.readonly %}readonly {% endif %}{{ field.name }}{% if field.optional %}?{% endif %}: {{ field.type }}
  {%- endfor %}
}
{% endfor %}

export class {{ operationClassName }} extends BaseContext {
  {% for operation in operations %}
  /**
   * {{ operation.description | wrap(120) | prefix('   * ', 1) }}
   *
   {% for param in operation.methodParameters -%}
   * @param {{ param.name }} {{ param.description | default(param.name) }}
   {% endfor -%}
   * @param options Options to apply to this specific request
   */
  public async {{ operation.methodName }}({% for param in operation.methodParameters %}{{param.name}}{% if param.optional %}?{% endif %}: {{param.type}}, {% endfor %}options?: CatalystOptions): Promise<{{ operation.returnType }}> {
    return this.catalyst.request({{ operation.method | upper | json }}, {{ operation.templatizedPath }}, { {% if operation.hasParams %}
      params,{% endif %}
      options,
    })
  }
  {% endfor %}
}